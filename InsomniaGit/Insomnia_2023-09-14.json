{"_type":"export","__export_format":4,"__export_date":"2023-09-14T17:26:57.248Z","__export_source":"insomnia.desktop.app:v2023.5.8","resources":[{"_id":"req_0e57963f6c88472d8117f0d76f6421f7","parentId":"fld_6ba2fd2be70a455bb0729b331117ae1c","modified":1694708339296,"created":1694708083415,"url":"{{ _.base_remote_url }}/cursinho/apply","name":"getAllApplys","description":"","method":"GET","body":{},"parameters":[],"headers":[{"name":"User-Agent","value":"insomnia/2023.5.8"}],"authentication":{},"metaSortKey":-1694708083415,"isPrivate":false,"settingStoreCookies":true,"settingSendCookies":true,"settingDisableRenderRequestBody":false,"settingEncodeUrl":true,"settingRebuildPath":true,"settingFollowRedirects":"global","_type":"request"},{"_id":"fld_6ba2fd2be70a455bb0729b331117ae1c","parentId":"wrk_a329ae746c26471183af3b00a4049daf","modified":1694708080201,"created":1694708080201,"name":"Apply","description":"","environment":{},"environmentPropertyOrder":null,"metaSortKey":-1694708080201,"_type":"request_group"},{"_id":"wrk_a329ae746c26471183af3b00a4049daf","parentId":null,"modified":1694707698708,"created":1694707698708,"name":"EmancipaAPI.git","description":"Insomnia Workspace for https://github.com/aostephano/EmancipaAPI.git}","scope":"design","_type":"workspace"},{"_id":"req_a5e61c90d96c44f192f3703e8b604504","parentId":"fld_6ba2fd2be70a455bb0729b331117ae1c","modified":1694708365154,"created":1694708346623,"url":"{{ _.base_remote_url }}/cursinho/apply","name":"createAply","description":"","method":"POST","body":{"mimeType":"application/json","text":"{\n  \"name\": \"{% faker 'person', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', 'en' %}\",\n  \"email\": \"{% faker 'person', '', '', '', '', '', '', '', '', '', '', 'adjective', '', '', '', 'paragraphs', '', '', 'lastName', '', '', '', '', '', '', 'en' %}@gmail.com\",\n  \"phone\": \"+1-555-555-5555\",\n  \"address\": {\n\t\t\"address\": \"{% faker 'location', '', '', '', '', '', '', '', '', '', '', '', '', '', 'streetAddress', '', '', '', '', '', '', '', '', '', '', 'en' %}\",\n    \"city\": \"{% faker 'location', '', '', '', '', '', '', '', '', '', '', '', '', '', 'cityName', '', '', '', '', '', '', '', '', '', '', 'en' %}\",\n    \"state\": \"{% faker 'location', '', '', '', '', '', '', '', '', '', '', '', '', '', 'state', '', '', '', '', '', '', '', '', '', '', 'en' %}\",\n    \"postalCode\": \"{% faker 'location', '', '', '', '', '', '', '', '', '', '', '', '', '', 'zipCodeByState', '', '', '', '', '', '', '', '', '', '', 'pt_BR' %}\"\n  }\n}\n"},"parameters":[],"headers":[{"name":"Content-Type","value":"application/json"},{"name":"User-Agent","value":"insomnia/2023.5.8"}],"authentication":{},"metaSortKey":-1694708016610.5,"isPrivate":false,"settingStoreCookies":true,"settingSendCookies":true,"settingDisableRenderRequestBody":false,"settingEncodeUrl":true,"settingRebuildPath":true,"settingFollowRedirects":"global","_type":"request"},{"_id":"req_9ea33eac2fe246b7b7aa34ef61d270a6","parentId":"fld_6ba2fd2be70a455bb0729b331117ae1c","modified":1694708261412,"created":1694708241062,"url":"{{ _.base_remote_url }}/cursinho/apply","name":"updateApplyByUuid","description":"","method":"PUT","body":{"mimeType":"application/json","text":"{\n\t\"uuid\": \"39d946f4-bd8d-4077-a51a-8e34d80ba821\",\n\t\"name\": \"{% faker 'person', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', 'en' %}\",\n\t\"email\": \"{% faker 'person', '', '', '', '', '', '', '', '', '', '', 'adjective', '', '', '', 'paragraphs', '', '', 'lastName', '', '', '', '', '', '', 'en' %}@gmail.com\",\n\t\"phone\": \"{% faker 'phone', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', 'number', '', '', '', '', '', 'pt_BR' %}\",\n\t\"address\": {\n\t\t\"address\": \"{% faker 'location', '', '', '', '', '', '', '', '', '', '', '', '', '', 'streetAddress', '', '', '', '', '', '', '', '', '', '', 'en' %}\",\n\t\t\"city\": \"{% faker 'location', '', '', '', '', '', '', '', '', '', '', '', '', '', 'city', '', '', '', '', '', '', '', '', '', '', 'en' %}\",\n\t\t\"state\": \"{% faker 'location', '', '', '', '', '', '', '', '', '', '', '', '', '', 'state', '', '', '', '', '', '', '', '', '', '', 'en' %}\",\n\t\t\"postalCode\": \"{% faker 'location', '', '', '', '', '', '', '', '', '', '', '', '', '', 'zipCodeByState', '', '', '', '', '', '', '', '', '', '', 'pt_BR' %}\"\n\t},\n\t\"questions\": [\n\t\t{\n\t\t\t\"questionText\": \"Question 1\",\n\t\t\t\"answer\": \"Asw 1\"\n\t\t},\n\t\t{\n\t\t\t\"questionText\": \"Question 2\",\n\t\t\t\"answer\": \"Asw 2\"\n\t\t},\n\t\t{\n\t\t\t\"questionText\": \"Question 3\",\n\t\t\t\"answer\": \"Asw 3\"\n\t\t},\n\t\t{\n\t\t\t\"questionText\": \"Question 4\",\n\t\t\t\"answer\": \"Asw 4\"\n\t\t},\n\t\t{\n\t\t\t\"questionText\": \"Question 5\",\n\t\t\t\"answer\": \"Asw 5\"\n\t\t}\n\t],\n\t\"active\": true\n}"},"parameters":[],"headers":[{"name":"Content-Type","value":"application/json"},{"name":"User-Agent","value":"insomnia/2023.5.8"}],"authentication":{},"metaSortKey":-1694707949806,"isPrivate":false,"settingStoreCookies":true,"settingSendCookies":true,"settingDisableRenderRequestBody":false,"settingEncodeUrl":true,"settingRebuildPath":true,"settingFollowRedirects":"global","_type":"request"},{"_id":"req_136dea4aadcd4fd986942ebc765ee9d0","parentId":"fld_6ba2fd2be70a455bb0729b331117ae1c","modified":1694708303092,"created":1694708272406,"url":"{{ _.base_remote_url }}/cursinho/apply","name":"deleteApplyByUuid","description":"","method":"DELETE","body":{"mimeType":"application/json","text":"  {\n    \"uuid\": \"4216e943-64b3-4401-bf93-4bda06c15335\",\n    \"name\": \"John Doe\",\n    \"email\": \"john@example.com\",\n    \"phone\": \"+1-555-555-5555\",\n    \"address\": {\n      \"address\": null,\n      \"city\": \"Example City\",\n      \"state\": null,\n      \"postalCode\": null\n    },\n    \"questions\": [\n      {\n        \"questionText\": \"Question 1\",\n        \"answer\": null\n      },\n      {\n        \"questionText\": \"Question 2\",\n        \"answer\": null\n      },\n      {\n        \"questionText\": \"Question 3\",\n        \"answer\": null\n      },\n      {\n        \"questionText\": \"Question 4\",\n        \"answer\": null\n      },\n      {\n        \"questionText\": \"Question 5\",\n        \"answer\": null\n      }\n    ],\n    \"active\": true\n  }"},"parameters":[],"headers":[{"name":"Content-Type","value":"application/json"},{"name":"User-Agent","value":"insomnia/2023.5.8"}],"authentication":{},"metaSortKey":-1694707883001.5,"isPrivate":false,"settingStoreCookies":true,"settingSendCookies":true,"settingDisableRenderRequestBody":false,"settingEncodeUrl":true,"settingRebuildPath":true,"settingFollowRedirects":"global","_type":"request"},{"_id":"req_b6e26f8eacc245e69a416715d6e174bc","parentId":"fld_eae87c81dd55408aafe54111c4086840","modified":1694707816230,"created":1694707776490,"url":"{{ _.base_remote_url }}/cursinho","name":"getAllCramSchools","description":"","method":"GET","body":{},"parameters":[],"headers":[{"name":"User-Agent","value":"insomnia/2023.5.8"}],"authentication":{},"metaSortKey":-1694707816197,"isPrivate":false,"settingStoreCookies":true,"settingSendCookies":true,"settingDisableRenderRequestBody":false,"settingEncodeUrl":true,"settingRebuildPath":true,"settingFollowRedirects":"global","_type":"request"},{"_id":"fld_eae87c81dd55408aafe54111c4086840","parentId":"wrk_a329ae746c26471183af3b00a4049daf","modified":1694707772697,"created":1694707772697,"name":"CramSchool","description":"","environment":{},"environmentPropertyOrder":null,"metaSortKey":-1694707772697,"_type":"request_group"},{"_id":"req_df58eac2ba524290aaa727f1a0e5755a","parentId":"fld_eae87c81dd55408aafe54111c4086840","modified":1694707877355,"created":1694707877355,"url":"{{ _.base_remote_url }}/cursinho","name":"getAllCramSchools","description":"","method":"GET","body":{},"parameters":[],"headers":[{"name":"User-Agent","value":"insomnia/2023.5.8"}],"authentication":{},"metaSortKey":-1694705184862,"isPrivate":false,"settingStoreCookies":true,"settingSendCookies":true,"settingDisableRenderRequestBody":false,"settingEncodeUrl":true,"settingRebuildPath":true,"settingFollowRedirects":"global","_type":"request"},{"_id":"req_3e0aaffb05e24f95beea6d79daf36654","parentId":"fld_eae87c81dd55408aafe54111c4086840","modified":1694707941952,"created":1694707848708,"url":"{{ _.base_remote_url }}/cursinho","name":"updateCramSchoolByUuid","description":"","method":"PUT","body":{"mimeType":"application/json","text":"{\n  \"uuid\": \"ac208315-f8ae-4c66-b624-3be46d3dafe0\",\n  \"name\": \"{% faker 'company', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', 'en' %}\",\n  \"cramSchoolSuffix\": \"{% faker 'word', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', 'en' %}\",\n  \"school\": \"{% faker 'person', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', 'en' %}\",\n  \"address\": {\n    \"address\": \"456 Updated St\",\n    \"city\": \"{% base64 'decode', 'normal', '' %}\",\n    \"state\": \"Updated State\",\n    \"postalCode\": \"{% faker 'location', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', 'en' %}\"\n  },\n  \"businessHour\": \"10:00 AM - 6:00 PM\",\n  \"description\": \"This is an updated Cram School\"\n}\n"},"parameters":[],"headers":[{"name":"Content-Type","value":"application/json"},{"name":"User-Agent","value":"insomnia/2023.5.8"}],"authentication":{},"metaSortKey":-1694702553527,"isPrivate":false,"settingStoreCookies":true,"settingSendCookies":true,"settingDisableRenderRequestBody":false,"settingEncodeUrl":true,"settingRebuildPath":true,"settingFollowRedirects":"global","_type":"request"},{"_id":"req_64532ea4839249b2845432a1d05db52e","parentId":"fld_eae87c81dd55408aafe54111c4086840","modified":1694707983204,"created":1694707947701,"url":"{{ _.base_remote_url }}/cursinho","name":"createNewCramSchool","description":"","method":"POST","body":{"mimeType":"application/json","text":"{\n  \"name\": \"{% faker 'company', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', 'en' %}\",\n  \"cramSchoolSuffix\": \"{% faker 'word', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', 'en' %}\",\n  \"school\": \"{% faker 'person', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', 'en' %}\",\n  \"address\": {\n    \"address\": \"123 Sample St\",\n    \"city\": \"Sample City\",\n    \"state\": \"Sample State\",\n    \"postalCode\": \"12345\"\n  },\n  \"businessHour\": \"9:00 AM - 5:00 PM\",\n  \"description\": \"This is a sample Cram School\"\n}\n"},"parameters":[],"headers":[{"name":"Content-Type","value":"application/json"},{"name":"User-Agent","value":"insomnia/2023.5.8"}],"authentication":{},"metaSortKey":-1694699922192,"isPrivate":false,"settingStoreCookies":true,"settingSendCookies":true,"settingDisableRenderRequestBody":false,"settingEncodeUrl":true,"settingRebuildPath":true,"settingFollowRedirects":"global","_type":"request"},{"_id":"req_5a427d4a7bb245168af294a7a7aa1367","parentId":"fld_eae87c81dd55408aafe54111c4086840","modified":1694708033247,"created":1694708005781,"url":"{{ _.base_remote_url }}/cursinho","name":"deleteCramSchool","description":"","method":"DELETE","body":{"mimeType":"application/json","text":"  {\n    \"uuid\": \"9510c62f-5da4-4280-9d42-c00913264ac7\",\n    \"name\": \"innovate B2B e-markets\",\n    \"cramSchoolSuffix\": \"twin\",\n    \"school\": \"student, creator, teacher\",\n    \"address\": {\n      \"address\": \"123 Sample St\",\n      \"city\": \"Sample City\",\n      \"state\": \"Sample State\",\n      \"postalCode\": \"12345\"\n    },\n    \"businessHour\": \"9:00 AM - 5:00 PM\",\n    \"description\": \"This is a sample Cram School\",\n    \"active\": true\n  }"},"parameters":[],"headers":[{"name":"Content-Type","value":"application/json"},{"name":"User-Agent","value":"insomnia/2023.5.8"}],"authentication":{},"metaSortKey":-1694698606524.5,"isPrivate":false,"settingStoreCookies":true,"settingSendCookies":true,"settingDisableRenderRequestBody":false,"settingEncodeUrl":true,"settingRebuildPath":true,"settingFollowRedirects":"global","_type":"request"},{"_id":"env_210fefa4054edfb62149d238e3d8a546927e560f","parentId":"wrk_a329ae746c26471183af3b00a4049daf","modified":1694710834146,"created":1694707699026,"name":"Base Environment","data":{"base_local_url":"http://localhost:8080/api","base_remote_url":"https://murmuring-forest-17447-193d7778677f.herokuapp.com/api"},"dataPropertyOrder":{"&":["base_local_url","base_remote_url"]},"color":null,"isPrivate":false,"metaSortKey":1694707699026,"_type":"environment"},{"_id":"jar_210fefa4054edfb62149d238e3d8a546927e560f","parentId":"wrk_a329ae746c26471183af3b00a4049daf","modified":1694707699029,"created":1694707699029,"name":"Default Jar","cookies":[],"_type":"cookie_jar"},{"_id":"spc_166b01941b534d35a836afe85f564ccb","parentId":"wrk_a329ae746c26471183af3b00a4049daf","modified":1694708399172,"created":1694708399172,"fileName":"New Document","contents":"openapi: 3.0.0\ninfo:\n  description: \"This is a sample server Petstore server.  You can find out more about\n    Swagger at [http://swagger.io](http://swagger.io) or on [irc.freenode.net,\n    #swagger](http://swagger.io/irc/).  For this sample, you can use the api key\n    `special-key` to test the authorization filters.\"\n  version: 1.0.2\n  title: Swagger Petstore\n  termsOfService: http://swagger.io/terms/\n  contact:\n    email: apiteam@swagger.io\n  license:\n    name: Apache 2.0\n    url: http://www.apache.org/licenses/LICENSE-2.0.html\ntags:\n  - name: pet\n    description: Everything about your Pets\n    externalDocs:\n      description: Find out more\n      url: http://swagger.io\n  - name: store\n    description: Access to Petstore orders\n  - name: user\n    description: Operations about user\n    externalDocs:\n      description: Find out more about our store\n      url: http://swagger.io\npaths:\n  /pet:\n    post:\n      tags:\n        - pet\n      summary: Add a new pet to the store\n      description: \"\"\n      operationId: addPet\n      requestBody:\n        $ref: \"#/components/requestBodies/Pet\"\n      responses:\n        \"405\":\n          description: Invalid input\n    put:\n      tags:\n        - pet\n      summary: Update an existing pet\n      description: \"\"\n      operationId: updatePet\n      requestBody:\n        $ref: \"#/components/requestBodies/Pet\"\n      responses:\n        \"400\":\n          description: Invalid ID supplied\n        \"404\":\n          description: Pet not found\n        \"405\":\n          description: Validation exception\n  /pet/findByStatus:\n    get:\n      tags:\n        - pet\n      summary: Finds Pets by status\n      description: Multiple status values can be provided with comma separated strings\n      operationId: findPetsByStatus\n      parameters:\n        - name: status\n          in: query\n          description: Status values that need to be considered for filter\n          required: true\n          explode: true\n          schema:\n            type: array\n            items:\n              type: string\n              enum:\n                - available\n                - pending\n                - sold\n              default: available\n      responses:\n        \"200\":\n          description: successful operation\n          content:\n            application/xml:\n              schema:\n                type: array\n                items:\n                  $ref: \"#/components/schemas/Pet\"\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: \"#/components/schemas/Pet\"\n        \"400\":\n          description: Invalid status value\n  /pet/findByTags:\n    get:\n      tags:\n        - pet\n      summary: Finds Pets by tags\n      description: Multiple tags can be provided with comma separated strings. Use tag1,\n        tag2, tag3 for testing.\n      operationId: findPetsByTags\n      parameters:\n        - name: tags\n          in: query\n          description: Tags to filter by\n          required: true\n          explode: true\n          schema:\n            type: array\n            items:\n              type: string\n      responses:\n        \"200\":\n          description: successful operation\n          content:\n            application/xml:\n              schema:\n                type: array\n                items:\n                  $ref: \"#/components/schemas/Pet\"\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: \"#/components/schemas/Pet\"\n        \"400\":\n          description: Invalid tag value\n      deprecated: true\n  \"/pet/{petId}\":\n    get:\n      tags:\n        - pet\n      summary: Find pet by ID\n      description: Returns a single pet\n      operationId: getPetById\n      parameters:\n        - name: petId\n          in: path\n          description: ID of pet to return\n          required: true\n          schema:\n            type: integer\n            format: int64\n      responses:\n        \"200\":\n          description: successful operation\n          content:\n            application/xml:\n              schema:\n                $ref: \"#/components/schemas/Pet\"\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Pet\"\n        \"400\":\n          description: Invalid ID supplied\n        \"404\":\n          description: Pet not found\n    post:\n      tags:\n        - pet\n      summary: Updates a pet in the store with form data\n      description: \"\"\n      operationId: updatePetWithForm\n      parameters:\n        - name: petId\n          in: path\n          description: ID of pet that needs to be updated\n          required: true\n          schema:\n            type: integer\n            format: int64\n      requestBody:\n        content:\n          application/x-www-form-urlencoded:\n            schema:\n              type: object\n              properties:\n                name:\n                  description: Updated name of the pet\n                  type: string\n                status:\n                  description: Updated status of the pet\n                  type: string\n      responses:\n        \"405\":\n          description: Invalid input\n    delete:\n      tags:\n        - pet\n      summary: Deletes a pet\n      description: \"\"\n      operationId: deletePet\n      parameters:\n        - name: api_key\n          in: header\n          required: false\n          schema:\n            type: string\n        - name: petId\n          in: path\n          description: Pet id to delete\n          required: true\n          schema:\n            type: integer\n            format: int64\n      responses:\n        \"400\":\n          description: Invalid ID supplied\n        \"404\":\n          description: Pet not found\n  /store/inventory:\n    get:\n      tags:\n        - store\n      summary: Returns pet inventories by status\n      description: Returns a map of status codes to quantities\n      operationId: getInventory\n      responses:\n        \"200\":\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                type: object\n                additionalProperties:\n                  type: integer\n                  format: int32\n  /store/order:\n    post:\n      tags:\n        - store\n      summary: Place an order for a pet\n      description: \"\"\n      operationId: placeOrder\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/Order\"\n        description: order placed for purchasing the pet\n        required: true\n      responses:\n        \"200\":\n          description: successful operation\n          content:\n            application/xml:\n              schema:\n                $ref: \"#/components/schemas/Order\"\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Order\"\n        \"400\":\n          description: Invalid Order\n  \"/store/order/{orderId}\":\n    get:\n      tags:\n        - store\n      summary: Find purchase order by ID\n      description: For valid response try integer IDs with value >= 1 and <= 10. Other\n        values will generated exceptions\n      operationId: getOrderById\n      parameters:\n        - name: orderId\n          in: path\n          description: ID of pet that needs to be fetched\n          required: true\n          schema:\n            type: integer\n            format: int64\n            minimum: 1\n            maximum: 10\n      responses:\n        \"200\":\n          description: successful operation\n          content:\n            application/xml:\n              schema:\n                $ref: \"#/components/schemas/Order\"\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Order\"\n        \"400\":\n          description: Invalid ID supplied\n        \"404\":\n          description: Order not found\n    delete:\n      tags:\n        - store\n      summary: Delete purchase order by ID\n      description: For valid response try integer IDs with positive integer value. Negative\n        or non-integer values will generate API errors\n      operationId: deleteOrder\n      parameters:\n        - name: orderId\n          in: path\n          description: ID of the order that needs to be deleted\n          required: true\n          schema:\n            type: integer\n            format: int64\n            minimum: 1\n      responses:\n        \"400\":\n          description: Invalid ID supplied\n        \"404\":\n          description: Order not found\n  /user:\n    post:\n      tags:\n        - user\n      summary: Create user\n      description: This can only be done by the logged in user.\n      operationId: createUser\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/User\"\n        description: Created user object\n        required: true\n      responses:\n        default:\n          description: successful operation\n  /user/createWithArray:\n    post:\n      tags:\n        - user\n      summary: Creates list of users with given input array\n      description: \"\"\n      operationId: createUsersWithArrayInput\n      requestBody:\n        $ref: \"#/components/requestBodies/UserArray\"\n      responses:\n        default:\n          description: successful operation\n  /user/createWithList:\n    post:\n      tags:\n        - user\n      summary: Creates list of users with given input array\n      description: \"\"\n      operationId: createUsersWithListInput\n      requestBody:\n        $ref: \"#/components/requestBodies/UserArray\"\n      responses:\n        default:\n          description: successful operation\n  /user/login:\n    get:\n      tags:\n        - user\n      summary: Logs user into the system\n      description: \"\"\n      operationId: loginUser\n      parameters:\n        - name: username\n          in: query\n          description: The user name for login\n          required: true\n          schema:\n            type: string\n        - name: password\n          in: query\n          description: The password for login in clear text\n          required: true\n          schema:\n            type: string\n      responses:\n        \"200\":\n          description: successful operation\n          headers:\n            X-Rate-Limit:\n              description: calls per hour allowed by the user\n              schema:\n                type: integer\n                format: int32\n            X-Expires-After:\n              description: date in UTC when token expires\n              schema:\n                type: string\n                format: date-time\n          content:\n            application/xml:\n              schema:\n                type: string\n            application/json:\n              schema:\n                type: string\n        \"400\":\n          description: Invalid username/password supplied\n  /user/logout:\n    get:\n      tags:\n        - user\n      summary: Logs out current logged in user session\n      description: \"\"\n      operationId: logoutUser\n      responses:\n        default:\n          description: successful operation\n  \"/user/{username}\":\n    get:\n      tags:\n        - user\n      summary: Get user by user name\n      description: \"\"\n      operationId: getUserByName\n      parameters:\n        - name: username\n          in: path\n          description: \"The name that needs to be fetched. Use user1 for testing. \"\n          required: true\n          schema:\n            type: string\n      responses:\n        \"200\":\n          description: successful operation\n          content:\n            application/xml:\n              schema:\n                $ref: \"#/components/schemas/User\"\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/User\"\n        \"400\":\n          description: Invalid username supplied\n        \"404\":\n          description: User not found\n    put:\n      tags:\n        - user\n      summary: Updated user\n      description: This can only be done by the logged in user.\n      operationId: updateUser\n      parameters:\n        - name: username\n          in: path\n          description: name that need to be updated\n          required: true\n          schema:\n            type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/User\"\n        description: Updated user object\n        required: true\n      responses:\n        \"400\":\n          description: Invalid user supplied\n        \"404\":\n          description: User not found\n    delete:\n      tags:\n        - user\n      summary: Delete user\n      description: This can only be done by the logged in user.\n      operationId: deleteUser\n      parameters:\n        - name: username\n          in: path\n          description: The name that needs to be deleted\n          required: true\n          schema:\n            type: string\n      responses:\n        \"400\":\n          description: Invalid username supplied\n        \"404\":\n          description: User not found\nexternalDocs:\n  description: Find out more about Swagger\n  url: http://swagger.io\nservers:\n  - url: https://petstore.swagger.io/v2\ncomponents:\n  requestBodies:\n    UserArray:\n      content:\n        application/json:\n          schema:\n            type: array\n            items:\n              $ref: \"#/components/schemas/User\"\n      description: List of user object\n      required: true\n    Pet:\n      content:\n        application/json:\n          schema:\n            $ref: \"#/components/schemas/Pet\"\n        application/xml:\n          schema:\n            $ref: \"#/components/schemas/Pet\"\n      description: Pet object that needs to be added to the store\n      required: true\n  schemas:\n    Order:\n      type: object\n      properties:\n        id:\n          type: integer\n          format: int64\n        petId:\n          type: integer\n          format: int64\n        quantity:\n          type: integer\n          format: int32\n        shipDate:\n          type: string\n          format: date-time\n        status:\n          type: string\n          description: Order Status\n          enum:\n            - placed\n            - approved\n            - delivered\n        complete:\n          type: boolean\n          default: false\n      xml:\n        name: Order\n    User:\n      type: object\n      properties:\n        id:\n          type: integer\n          format: int64\n        username:\n          type: string\n        firstName:\n          type: string\n        lastName:\n          type: string\n        email:\n          type: string\n        password:\n          type: string\n        phone:\n          type: string\n        userStatus:\n          type: integer\n          format: int32\n          description: User Status\n      xml:\n        name: User\n    Category:\n      type: object\n      properties:\n        id:\n          type: integer\n          format: int64\n        name:\n          type: string\n      xml:\n        name: Category\n    Tag:\n      type: object\n      properties:\n        id:\n          type: integer\n          format: int64\n        name:\n          type: string\n      xml:\n        name: Tag\n    Pet:\n      type: object\n      required:\n        - name\n        - photoUrls\n      properties:\n        id:\n          type: integer\n          format: int64\n        category:\n          $ref: \"#/components/schemas/Category\"\n        name:\n          type: string\n          example: doggie\n        photoUrls:\n          type: array\n          xml:\n            name: photoUrl\n            wrapped: true\n          items:\n            type: string\n        tags:\n          type: array\n          xml:\n            name: tag\n            wrapped: true\n          items:\n            $ref: \"#/components/schemas/Tag\"\n        status:\n          type: string\n          description: pet status in the store\n          enum:\n            - available\n            - pending\n            - sold\n      xml:\n        name: Pet\n    ApiResponse:\n      type: object\n      properties:\n        code:\n          type: integer\n          format: int32\n        type:\n          type: string\n        message:\n          type: string","contentType":"yaml","_type":"api_spec"}]}